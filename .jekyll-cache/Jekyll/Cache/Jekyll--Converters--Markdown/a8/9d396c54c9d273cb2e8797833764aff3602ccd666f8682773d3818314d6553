I"}<div class="note warning">
  <h5>Interfaces were changed dramatically in <a href="/news/2017/08/04/cosmos-4-0-0-released/">COSMOS 4.0.0</a></h5>
  <p>This article only applies to pre-4.0.0 COSMOS releases. For current COSMOS releases please see the new <a href="/docs/interfaces/">Interface</a> and <a href="/docs/protocols/">Protocol</a> documentation.</p>
</div>

<p>One of our Ball Aerospace engineers asked how they could add a checksum to an existing COSMOS interface when talking to their target. COSMOS does not support this directly so it requires creating a custom interface. While this might sound daunting, the COSMOS interfaces were designed just for this type of extension and provide hooks for customization.</p>

<p>In this example we will assume the original interface is the COSMOS <a href="/docs/interfaces/#serial-interface">Serial Interface</a>. In your targetâ€™s lib folder create a new interface called checksum_serial_interface.rb:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">require</span> <span class="s1">'cosmos'</span> <span class="c1"># always require cosmos</span>
<span class="nb">require</span> <span class="s1">'cosmos/interfaces/serial_interface'</span> <span class="c1"># original interface being extended</span>

<span class="k">module</span> <span class="nn">Cosmos</span>
<span class="k">class</span> <span class="nc">ChecksumSerialInterface</span> <span class="o">&lt;</span> <span class="no">SerialInterface</span>
  <span class="k">def</span> <span class="nf">pre_write_packet</span><span class="p">(</span><span class="n">packet</span><span class="p">)</span>
    <span class="n">data</span> <span class="o">=</span> <span class="n">packet</span><span class="p">.</span><span class="nf">buffer</span>
    <span class="n">checksum</span> <span class="o">=</span> <span class="mh">0xFFFF</span>
    <span class="n">data</span><span class="p">.</span><span class="nf">each_byte</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">checksum</span> <span class="o">+=</span> <span class="n">x</span> <span class="p">}</span>
    <span class="n">checksum</span> <span class="o">&amp;=</span> <span class="mh">0xFFFF</span>
    <span class="n">data</span> <span class="o">&lt;&lt;</span> <span class="p">[</span><span class="n">checksum</span><span class="p">].</span><span class="nf">pack</span><span class="p">(</span><span class="s2">"n"</span><span class="p">)</span> <span class="c1"># Pack as 16 bit unsigned bit endian</span>
    <span class="k">return</span> <span class="n">data</span>
  <span class="k">end</span>

  <span class="k">def</span> <span class="nf">post_read_data</span><span class="p">(</span><span class="n">packet_data</span><span class="p">)</span>
    <span class="n">len</span> <span class="o">=</span> <span class="n">packet_data</span><span class="p">.</span><span class="nf">length</span>
    <span class="n">calc_checksum</span> <span class="o">=</span> <span class="mh">0xFFFF</span>
    <span class="n">packet_data</span><span class="p">[</span><span class="mi">0</span><span class="o">..</span><span class="p">(</span><span class="n">len</span> <span class="o">-</span> <span class="mi">3</span><span class="p">)].</span><span class="nf">each_byte</span> <span class="p">{</span><span class="o">|</span><span class="n">x</span><span class="o">|</span> <span class="n">calc_checksum</span> <span class="o">+=</span> <span class="n">x</span> <span class="p">}</span>
    <span class="n">calc_checksum</span> <span class="o">&amp;=</span> <span class="mh">0xFFFF</span>
    <span class="n">rx_checksum</span> <span class="o">=</span> <span class="n">packet_data</span><span class="p">[</span><span class="o">-</span><span class="mi">2</span><span class="o">..-</span><span class="mi">1</span><span class="p">].</span><span class="nf">unpack</span><span class="p">(</span><span class="s2">"n"</span><span class="p">)</span> <span class="c1"># Unpack as 16 bit unsigned big endian</span>
    <span class="k">if</span> <span class="n">calc_checksum</span> <span class="o">==</span> <span class="n">rx_checksum</span>
      <span class="k">return</span> <span class="n">packet_data</span>
    <span class="k">else</span>
      <span class="nb">puts</span> <span class="s2">"Bad checksum detected. Calculated: 0x</span><span class="si">#{</span><span class="n">calc_checksum</span><span class="p">.</span><span class="nf">to_s</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span><span class="si">}</span><span class="s2"> Received: 0x</span><span class="si">#{</span><span class="n">rx_checksum</span><span class="p">.</span><span class="nf">to_s</span><span class="p">(</span><span class="mi">16</span><span class="p">)</span><span class="si">}</span><span class="s2">. Dropping packet."</span>
      <span class="k">return</span> <span class="s2">""</span> <span class="c1"># Also can return nil to break the connection and reconnect to the target</span>
    <span class="k">end</span>
  <span class="k">end</span>

<span class="k">end</span>
<span class="k">end</span></code></pre></figure>

<p>What weâ€™re doing is overriding pre_write_packet in StreamInterface to allow us to modify the data before it is written to the packet and sent over the interface. We also override post_read_data to operate on data received before it is sent back to the COSMOS server and thus the tools. Note there is also a post_read_packet(packet) method which is called after post_read_data is called and after the COSMOS Packet has been created. All Interfaces inheriting from StreamInterface includes these callback methods, including SerialInterface, TcpipServerInterface, and TcpipClientInterface. Note that UdpInterface inherits directly from Interface and thus does NOT include these callbacks.</p>

<p>Then in your cmd_tlm_server.txt file for your target you use your new interface:</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#         interface name  file name                    write read baud   parity stop timeouts stream
INTERFACE UART_INTERFACE  checksum_serial_interface.rb COM1  COM1 115200 NONE   1    nil nil  BURST
</code></pre></div></div>

<p>I added a comment line above the definition which describes the settings. For more information see the <a href="/docs/interfaces/#serial-interface">Serial Interface</a> documentation.</p>

<p>This same technique can obviously be used to extend the the other TCPIP interfaces and can be used with all the various <a href="/docs/interfaces/#streams">Streams</a> COSMOS defines.</p>

<p>If you have a question which would benefit the community or find a possible bug please use our <a href="https://github.com/BallAerospace/COSMOS/issues">Github Issues</a>. If you would like more information about a COSMOS training or support contract please contact us at <a href="mailto:cosmos@ball.com">cosmos@ball.com</a>.</p>
:ET